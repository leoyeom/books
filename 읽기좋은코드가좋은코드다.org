스타트.

// 우분투 13.04의 크리티컬 에러로 작성해 두었던 노트가 사라짐에 새로이 정리함. 130430.
// 자세한 정리는 마음의 여유가 없어, 최대한 원칙 중심으로 간략하게 적는다.  

* 들어가는 글.

 - 혼자서 하는 생각은 의미가 있다. 가끔 나도 모르게 떠오르는 생각들 중에 '기발한데' 하며 무릎을 탁 치는 경우가 종종 있으니까.
   하지만 다음 날 아침에 깨어서 보면, 이게 뭐였더라 하고 고민하게 되는 그런 경험이 있을 것이다. 혼자만의 생각은 검증받지 못한 것이며 많은 생각들이 다른 이의 시각으로 벗어나 바라볼 때 더 발전된 방향을 찾기가 쉽다. 따라서 협업이란 것은 피할 수 밖에 없는 상황을 제외하고는 좋은 선택이 될 것이다.
 - 협업을 위해서는 이야기를 듣는 사람, 글을 읽는 사람을 배려하는 것이다. 이해를 위한 노력이 없이는 제대로 된 뜻이 전달되기 어렵다. 정해진 틀이 명확할 수록 전달하고자 하는 뜻이 명확해질 가능성이 높다. 이를 위해 노력하는 일은 협업이란 과정이 의미있는 환경하에서 항상 의미가 있다.

* 1장. 코드는 이해하기 쉬워야 한다.

 - 읽는 사람을 고려하여 읽기 쉽게 만든다.
 - 가독성의 기본 정리 " 코드는 다른 사람이 그것을 이해하는 데 들이는 시간을 최소화하는 방식으로 작성되어야 한다.
 - 분량이 적다라는 가치와 읽기 좋다 라는 가치, 효율적인 아키텍쳐 및 알고리즘 이라는 가치 를 고려한다.

** 1. 표면적인 수준에서 개선

* 2장. 이름에 정보 담기

 - 무의미한 단어를 피하고 이름에 정보를 담아낸다.
 - 보편적인 이름을 피한다.
 - 재치있는 이름보다 간결하고 명확한 이름이 좋다.
 - 임시적인 환경의 변수에는 그에 적당한 이름을 부여하는 것이 좋지만 전역 등 보편적인 이름에는 명확한 이름을 부여한다.
 - 추가적인 정보가 필요하다면 이름에 반영한다.
 - 좁은 범위에서는 짧은 이름도 좋다.
 - 불필요한 단어는 제거하라.
 - 이름 포맷팅으로 의미를 전달하라.
 
** 헝가리안 표기법 : M$에서 사용하는 표기법. 알아두는 것도 나쁘지 않다.
  - http://en.wikipedia.org/wiki/Hungarian_notation

* 3장.  오해할 수 없는 이름들

 - 본인이 지은 이름에 다른 사람들이 다른 의미로 해석할 수 있을까 라는 질문을 던져보며 철저하게 확인해야 한다.
 - 경계를 포함하는 한계값을 다룰 때는 min, max를 활용하라
 - 경계를 포함하는 범위에는 first, last를 활용하라
 - 경계를 포함하고 배제하는 범위에는 begin,end를 활용하라

* 4장. 미학

 - 코드를 읽는 사람이 이미 친숙한, 일관성 있는 레이아웃을 사용하라.
 - 비슷한 코드는 서로 비슷해 보이게 만들어라.
 - 서로 연관된 코드는 하나의 블록으로 묶어라.
 - 미학적으로 보기 좋은 코드가 사용하기 더 편리하다.
 - 메소드를 사용하여 불규칙성을 정리하라.
 - 도움이 된다면 코드의 열을 맞춰라.
 - 일관성 있는 스타일은 '올바른' 스타일보다 더 중요하다.
 - 
 - 여러 블록에 담긴 코드가 모두 비슷한 일을 수행하면, 실루엣이 동일해 보이게 만들어라.
 - 코드 곳곳을 '열'로 만들어서 주을 맞추면 코드를 한 눈에 훑어보기 편하다.
 - 코드의 한 곳에서 A,B,C가 이 순서대로 언급되고 있으면, 다른 곳에서 B,C,A와 같은 식으로 언급하지 말라. 의미 있는 순서를 정하여 모든 곳에서 그 순서를 지켜라.
 - 빈 줄을 이용하여 커다란 블록을 논리적인 '문단'으로 나누어라.

* 5장. 주석에 담아야 하는 대상

 - 주석의 목적은 코드를 읽는 사람이 코드를 작성한 사람만큼 코드를 잘 이해하게 돕는 데 있다.
 - 코드에서 유추할 수 있도록 이름을 명명하고 그에 관련된 주석은 적지 않는다.
 - 나쁜 이름에 주석을 달지 말라 - 대신 이름을 고쳐라
 - 생각을 기록하라.
 - 감독의 설명을 포함하라
 - 코드에 있는 결함을 설명하라 // 개선 아이디어를 TO-DO: 개선할 점은 다음과 같다 처럼 적어둔다
 - TODO / FIXME / HACK / XXX(danger. big problem) / 
 - 상수에 대한 설명.
 - 코드를 읽는 사람 입장이 되어라.
 - 나올 것 같은 질문 예측하기
 - 사람이 쉽게 빠질 것 같은 함정을 경고하라
 - 글 쓰는 두려움을 떨쳐내라
 
* 6장. 명확하고 간결한 주석 달기

 - 주석은 높은 '정보 대 공간' 비율을 갖춰야 한다.
 - 주석을 간결하게 하라. 모호한 대명사는 피하라.
 - 엉터리 문장을 다듬어라.
 - 함수의 동작을 명확하게 설명하라.
 - 코너케이스를 설명해주는 입/출력 예를 사용하라.
 - 코드의 의도를 명시하라
 - 정보축약형 단어를 사용하라 
 - 
 - it, this 같은 대명사가 여러가지를 가리킬 수 있다면 사용하지 않는 것이 좋다
 - 함수의 동작을 실제로 할 수 있는 한도 내에서 최대한 명확하게 설명하라
 - 신중하게 선택된 입/출력 예로 주석을 서술하라
 - 코드가 가진 의도를 너무 자세한 내용이 아니라 높은 수준에서 개괄적으로 설명하라
 - 같은 줄에 있는 주석으로 의미가 불분명한 함수의 인수를 설명하라
 - 많은 의미를 함축하는 단어로 주석을 간단하게 만들라

** 2. 루프와 논리를 단순화하기

* 7장. 읽기 쉽게 흐름제어 만들기

 - 흐름을 제어하는 조건과 루프 그리고 여타 요소를 최대한 '자연스럽게' 만들도록 노력하라. 코드를 읽다가 다시 되돌아가서 코드를 읽지 않아도 되게끔 만들어야 한다.
 - 줄 수를 최소화하는 일보다 다른 사람이 코드를 읽고 이해하는 데 걸리는 시간을 최소화 하는 일이 더 중요하다.
 - 중첩을 최소화 한다.
 - goto는 사용하지 않기 
 - 수정해야 하는 상황이라면 여러분의 코드를 새로운 관점에서 바라보라. 뒤로 한걸음 물러서서 코드 전체를 바라보라.

*** 요다 표기법
 - if ( obj = NULL ) ...
 - if ( obj == NULL ) ...
 - if ( NULL == obj ) ...
 - Not if anything to say about it I have - Yoda. // Yoda notation.

* 8장. 거대한 표현을 잘게 쪼개기

 - 거대한 표현을 더 소화하기 쉬운 여러 조각으로 나눈다.
 - 설명 변수
 - 요약 변수
 - 

* 9장. 변수와 가독성

 - 변수 제거하기
 - 변수의 범위를 좁혀라 / 변수가 적용되는 범위를 최대한 좁게 만들어라
 - 많은 메소드를 정적 static으로 만들어서 클래스 멤버 접근을 제한하라
 - 커다란 클래스를 여러 작은 클래스로 나누는 방법 /
 - 자바스크립트에서 프라이빗 변수 만들기
 - 자바스크립트 전역 범위
 - 파이썬과 자바스크립트에는 없는 중첩된 범위
 - 정의를 아래로 옮기기
 - 값을 한 번만 할당하는 변수를 선호하라 
 - 방해되는 변수를 제거하라. 결과를 즉시 처리하는 방식으로 '중간 결과값'을 저장하는 변수를 제거하는 몇 가지 예를 살펴보았다.
 - 각 변수의 범위를 최대한 작게 줄여라. 각 변수의 위치를 옮겨서 변수가 나타나는 줄의 수를 최소화하라. 눈에 보이지 않으면 마음에서 멀어지는 법이다.
 - 값이 한 번만 할당되는 변수를 선호하라. 값이 한 번만 할당되는 (const, final, 혹은 다른 방식으로 값이 불변인) 변수는 훨씬 이해하기 쉽다.
** 3. 코드 재작성하기

* 10장. 상관없는 하위문제 추출하기

- 
